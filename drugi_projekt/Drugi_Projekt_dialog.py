# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DrugiProjektDialog
                                 A QGIS plugin
 wtyczka na zajecia z informatyki
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Mateusz Jankowski Kacper Kedra 
        email                : mateusz2001.pl@wp.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsWkbTypes
import numpy as np
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QDialog, QApplication, QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Drugi_Projekt_dialog_base.ui'))


class DrugiProjektDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(DrugiProjektDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_lczba_elementow.clicked.connect(self.zlicz_elementy)
        self.radioButton_pole.clicked.connect(self.obliczanie)
        self.radioButton_przewyzszenia.clicked.connect(self.obliczanie)

    def obliczanie(self):
        aktywna_warstwa = iface.activeLayer()
        liczba_elementow = self.mMapLayerComboBox.currentLayer().selectedFeatures()
        X = []
        Y = []
     
        for punkt in liczba_elementow:
            wsp = punkt.geometry().asPoint()
            x = wsp.x()
            y = wsp.y()
            X.append(x)
            Y.append(y)
            
        if self.radioButton_przewyzszenia.isChecked() == True and len(liczba_elementow) == 2:
            dh = Z[1] - Z[0]
            punkt_1 = nr[0]
            punkt_2 = nr[1]
            iface.messageBar().pushMessage('Różnica wysokosci między punktem '+ str(punkt_1)+ ' oraz punktem '+str(punkt_2) + ' to: '+str(round(dh,3))+' |m|')
            
        elif self.radioButton_pole.isChecked()  == True and len(liczba_elementow) >2:
            punkty = []
            for i in range(0, len(X)):
                punkty.append([X[i], Y[i] ])
            pa = 0
            for i in range(len(punkty)):
                if i ==len(punkty) - 1:
                    pa += (punkty[i][0]+ punkty[0][0]) * (punkty[i][1] - punkty[0][1])
                else:
                    pa += (punkty[i][0] + punkty[i + 1][0]) * (punkty)
            P = abs( -pa/2)
                      
            iface.messageBar().pushMessage('Pole obszaru wynosi: '+str(round(P,5))+' [m2]')
       
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText('Zła liczba zaznaczonych punktów do tej operacji!')
            msg.setInformativeText
            msg.setWindowTitle("Błąd przy zaznaczaniu punktów!!")
            msg.exec_()                   
        
   
    
    